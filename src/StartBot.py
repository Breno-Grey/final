from gastos_manager import GastosManager
import google.generativeai as genai
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from collections import defaultdict
from datetime import datetime, timedelta
import logging
from validadores import ValidadorEntrada
from resumo_manager import ResumoManager
import telegram
import time

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Criar pasta data se n√£o existir
if not os.path.exists('data'):
    os.makedirs('data')

# Configurar a API do Gemini
GOOGLE_API_KEY = "AIzaSyAyQyCQPAkR5yjGkLgz-hOWqzpH-WALRVY"
TELEGRAM_TOKEN = "7806097135:AAFb40DQgSGiu7uIk6trkdFWISW-j37Keyg"
genai.configure(api_key=GOOGLE_API_KEY)

# Configurar o modelo
model = genai.GenerativeModel('gemini-1.5-pro')

# Dicion√°rio para armazenar inst√¢ncias do GastosManager por usu√°rio
gastos_managers = {}

# Dicion√°rio para armazenar hist√≥rico de conversas por usu√°rio
historico_conversas = defaultdict(list)

# Dicion√°rio para armazenar estado de espera por sal√°rio
aguardando_salario = set()

# Dicion√°rio para armazenar estado de espera por nome
aguardando_nome = set()

# Dicion√°rio para armazenar estado de espera por meta
aguardando_meta = {}

# Adicione um controle de estado para saber se o usu√°rio est√° no fluxo de envio de comprovante
aguardando_comprovante = set()

# Adicione um dicion√°rio para rastrear o √∫ltimo tipo de mensagem enviada para cada usu√°rio
ultimo_estado_usuario = {}

# Configura√ß√£o do hist√≥rico
MAX_HISTORICO = 10  # N√∫mero m√°ximo de mensagens no hist√≥rico
TEMPO_EXPIRACAO = timedelta(hours=12)  # Tempo para expirar o hist√≥rico

# Inicializa o gerenciador de resumos
resumo_manager = ResumoManager()

def get_gastos_manager(user_id):
    """Obt√©m ou cria uma inst√¢ncia do GastosManager para um usu√°rio"""
    if user_id not in gastos_managers:
        # Cria um banco de dados espec√≠fico para o usu√°rio na pasta data
        db_name = f'data/gastos_{user_id}.db'
        gastos_managers[user_id] = GastosManager(db_name)
    return gastos_managers[user_id]

def limpar_historico_antigo():
    """Limpa o hist√≥rico antigo de todos os usu√°rios"""
    agora = datetime.now()
    for user_id in list(historico_conversas.keys()):
        historico_conversas[user_id] = [
            msg for msg in historico_conversas[user_id]
            if agora - msg['timestamp'] <= TEMPO_EXPIRACAO
        ]
        if not historico_conversas[user_id]:
            del historico_conversas[user_id]

def adicionar_mensagem_historico(user_id, role, content):
    """Adiciona uma mensagem ao hist√≥rico do usu√°rio"""
    limpar_historico_antigo()
    
    if user_id not in historico_conversas:
        historico_conversas[user_id] = []
    
    historico_conversas[user_id].append({
        'role': role,
        'content': content,
        'timestamp': datetime.now()
    })
    
    # Mant√©m apenas as √∫ltimas MAX_HISTORICO mensagens
    if len(historico_conversas[user_id]) > MAX_HISTORICO:
        historico_conversas[user_id] = historico_conversas[user_id][-MAX_HISTORICO:]

async def processar_comando_ia(mensagem, user_id, nome):
    """Processa a mensagem usando a IA do Gemini com contexto"""
    try:
        gm = get_gastos_manager(user_id)
        
        # Obt√©m dados financeiros do usu√°rio
        salario = gm.get_salario()
        resumo_gastos, total_gastos, _ = gm.get_resumo()
        resumo_receitas, total_receitas = gm.get_resumo_receitas()
        metas = gm.get_metas()
        
        # Prepara o contexto financeiro
        contexto_financeiro = ""
        if salario:
            contexto_financeiro += f"\nüí∞ Sal√°rio: R${salario:.2f}"
        
        if total_gastos > 0:
            contexto_financeiro += "\n\nüìä Gastos:"
            for categoria, valor, percentual in resumo_gastos:
                contexto_financeiro += f"\n‚Ä¢ {categoria}: R${valor:.2f} ({percentual:.1f}%)"
            contexto_financeiro += f"\nüíµ Total: R${total_gastos:.2f}"
            
            if salario:
                percentual_salario = (total_gastos / salario) * 100
                contexto_financeiro += f"\nüìà {percentual_salario:.1f}% do sal√°rio"
        
        if total_receitas > 0:
            contexto_financeiro += "\n\nüíµ Receitas:"
            for categoria, valor, percentual in resumo_receitas:
                contexto_financeiro += f"\n‚Ä¢ {categoria}: R${valor:.2f} ({percentual:.1f}%)"
            contexto_financeiro += f"\nüí∞ Total: R${total_receitas:.2f}"
        
        if metas:
            contexto_financeiro += "\n\nüéØ Metas Financeiras:"
            for meta in metas:
                id_meta, nome_meta, valor_meta, valor_atual, data_limite, descricao, status = meta
                percentual = (valor_atual / valor_meta) * 100 if valor_meta > 0 else 0
                emoji = "‚úÖ" if status == "conclu√≠da" else "‚è≥" if status == "ativa" else "‚ùå"
                contexto_financeiro += f"\n{emoji} {nome_meta}: R${valor_atual:.2f} / R${valor_meta:.2f} ({percentual:.1f}%)"
        
        # Contexto base para a IA
        contexto_base = f"""
        Voc√™ √© o FinBot, um assistente financeiro amig√°vel e atencioso. Seu objetivo √© ajudar {nome} a organizar suas finan√ßas de forma simples e pr√°tica, sempre com um toque pessoal.

Dados financeiros de {nome}:
{contexto_financeiro}

Use esses dados para dar conselhos pr√°ticos e personalizados. Seja conciso, mas mantenha um tom amig√°vel e acolhedor.

Regras de comunica√ß√£o:
1. Use emojis para destacar pontos importantes
2. Seja breve e objetivo, mas n√£o muito direto
3. Divida respostas longas em mensagens curtas
4. Use formata√ß√£o simples
5. Evite jarg√µes financeiros
6. D√™ exemplos pr√°ticos
7. Mantenha um tom amig√°vel e acolhedor

Exemplo de resposta:
"Ol√° {nome}! üëã

üí∞ Analisando seus gastos:
‚Ä¢ Alimenta√ß√£o: R$500 (25%)
‚Ä¢ Transporte: R$300 (15%)

üí° Sugest√£o: Que tal tentar reduzir os gastos com alimenta√ß√£o em 10%? Cozinhar em casa pode ser uma boa op√ß√£o! 

Se precisar de ajuda com receitas econ√¥micas, √© s√≥ me avisar! üòä"

Nunca use:
- Asteriscos (*)
- Texto em negrito
- Respostas muito longas
- Jarg√µes t√©cnicos
- Caracteres especiais

Mantenha as respostas:
- Curtas e diretas, mas amig√°veis
- Com emojis relevantes
- Focadas em a√ß√µes pr√°ticas
- Baseadas nos dados do usu√°rio
- Com um toque pessoal
        """
        
        # Adiciona a mensagem do usu√°rio ao hist√≥rico
        adicionar_mensagem_historico(user_id, 'user', mensagem)
        
        # Prepara o hist√≥rico para o modelo
        historico_formatado = [{'role': 'user', 'parts': [contexto_base]}]
        for msg in historico_conversas[user_id]:
            historico_formatado.append({
                'role': msg['role'],
                'parts': [msg['content']]
            })
        
        try:
            # Gera resposta com contexto
            response = model.generate_content(historico_formatado)
            resposta = response.text
            
            # Adiciona a resposta ao hist√≥rico
            adicionar_mensagem_historico(user_id, 'model', resposta)
            
            return resposta
            
        except Exception as e:
            logger.error(f"Erro ao gerar resposta do Gemini: {str(e)}")
            if "quota" in str(e).lower():
                return "Desculpe, estou tendo dificuldades tempor√°rias para processar sua pergunta devido a limita√ß√µes de uso. Por favor, tente novamente em alguns minutos. üòä"
            return "Desculpe, estou tendo dificuldades para processar sua pergunta. Por favor, tente novamente em alguns instantes. üòä"
        
    except Exception as e:
        logger.error(f"Erro ao processar comando IA: {str(e)}")
        return "Desculpe, ocorreu um erro ao processar sua mensagem. Por favor, tente novamente mais tarde. üòä"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manipula o comando /start"""
    user_id = update.effective_user.id
    gm = get_gastos_manager(user_id)
    
    # Verifica se j√° tem nome registrado
    nome = gm.get_nome_usuario()
    
    if nome is None:
        # Adiciona usu√°rio √† lista de espera por nome
        aguardando_nome.add(user_id)
        
        welcome_message = """
        üéâ Bem-vindo ao FinBot! ü§ñ

        Qual √© o seu nome?
        """
        await update.message.reply_text(welcome_message)
    else:
        # Verifica se j√° tem sal√°rio registrado
        salario = gm.get_salario()
        
        if salario is None:
            # Adiciona usu√°rio √† lista de espera por sal√°rio
            aguardando_salario.add(user_id)
            
            welcome_message = f"""
            Ol√° {nome}! üëã

            Qual √© seu sal√°rio mensal?
            (apenas n√∫meros, exemplo: 3000)
            """
            await update.message.reply_text(welcome_message)
        else:
            # Verifica se j√° tem metas registradas
            metas = gm.get_metas()
            
            if not metas:
                # Adiciona usu√°rio √† lista de espera por meta
                aguardando_meta[user_id] = {
                    'etapa': 'nome_meta',
                    'dados': {}
                }
                
                welcome_message = f"""
                Ol√° {nome}! üëã

                Vamos criar sua primeira meta?
                Qual √© o nome da meta?
                (exemplo: "Viagem para a praia")
                """
                await update.message.reply_text(welcome_message)
            else:
                # Cria bot√µes inline para a√ß√µes comuns
                keyboard = [
                    [
                        InlineKeyboardButton("üí∞ Registrar Gasto", callback_data="registrar_gasto"),
                        InlineKeyboardButton("üíµ Registrar Receita", callback_data="registrar_receita")
                    ],
                    [
                        InlineKeyboardButton("üìä Ver Resumo", callback_data="ver_resumo"),
                        InlineKeyboardButton("üéØ Ver Metas", callback_data="ver_metas")
                    ],
                    [
                        InlineKeyboardButton("üìù Ajuda", callback_data="ajuda"),
                        InlineKeyboardButton("‚öôÔ∏è Configura√ß√µes", callback_data="configuracoes")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                welcome_message = f"""
                Ol√° {nome}! üëã

                Como posso te ajudar hoje?
                """
                await update.message.reply_text(welcome_message, parse_mode='Markdown', reply_markup=reply_markup)

async def ajuda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manipula o comando /ajuda"""
    # Cria bot√µes inline para se√ß√µes de ajuda
    keyboard = [
        [
            InlineKeyboardButton("üí∞ Gastos", callback_data="ajuda_gastos"),
            InlineKeyboardButton("üíµ Receitas", callback_data="ajuda_receitas")
        ],
        [
            InlineKeyboardButton("üéØ Metas", callback_data="ajuda_metas"),
            InlineKeyboardButton("üìä Resumos", callback_data="ajuda_resumos")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è Configura√ß√µes", callback_data="ajuda_config"),
            InlineKeyboardButton("‚ùì Outros", callback_data="ajuda_outros")
        ],
        [
            InlineKeyboardButton("üéâ Acesso Ilimitado", callback_data="acesso_ilimitado")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    help_message = """
    *üìã Comandos Dispon√≠veis*

    *üí∞ Gastos*
    ‚Ä¢ "gastei 50 com almo√ßo"
    ‚Ä¢ "paguei 100 no mercado"
    ‚Ä¢ "comprei um presente por 80"

    *üíµ Receitas*
    ‚Ä¢ "ganhei 100 com freela"
    ‚Ä¢ "recebi 50 de presente"
    ‚Ä¢ "consegui 200 com vendas"

    *üìä Comandos*
    /salario - Sal√°rio
    /resumo - Resumo b√°sico
    /resumodetalhado - An√°lise completa
    /categorias - Lista de categorias
    /metas - Gerenciar metas
    /limpar - Limpar hist√≥rico

    *üéØ Metas*
    ‚Ä¢ Crie metas com nome e valor
    ‚Ä¢ Acompanhe seu progresso
    ‚Ä¢ Defina data limite

    *ü§ñ IA Financeira*
    ‚Ä¢ Pergunte sobre investimentos
    ‚Ä¢ Pe√ßa dicas de economia
    ‚Ä¢ Consulte sobre or√ßamento

    Clique nos bot√µes para mais detalhes!
    """
    await update.message.reply_text(help_message, parse_mode='Markdown', reply_markup=reply_markup)

async def salario(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manipula o comando /salario"""
    gm = get_gastos_manager(update.effective_user.id)
    
    # Se n√£o tiver argumentos, mostra o sal√°rio atual
    if not context.args:
        salario = gm.get_salario()
        if salario is None:
            await update.message.reply_text(
                "‚ùå Voc√™ ainda n√£o definiu seu sal√°rio.\n\n"
                "Para definir, use: /salario [valor]\n"
                "Exemplo: /salario 3000"
            )
        else:
            await update.message.reply_text(
                f"üí∞ Seu sal√°rio atual √©: R${salario:.2f}\n\n"
                "Para alterar, use: /salario [novo valor]\n"
                "Exemplo: /salario 3500"
            )
        return
    
    # Se tiver argumentos, tenta alterar o sal√°rio
    try:
        novo_salario = float(context.args[0].replace(',', '.'))
        
        if novo_salario <= 0:
            await update.message.reply_text("‚ùå O sal√°rio deve ser maior que zero. Por favor, digite um valor v√°lido.")
            return
        
        if gm.definir_salario(novo_salario):
            await update.message.reply_text(
                f"‚úÖ Sal√°rio atualizado com sucesso!\n"
                f"üí∞ Novo sal√°rio: R${novo_salario:.2f}"
            )
        else:
            await update.message.reply_text("‚ùå Erro ao atualizar sal√°rio. Por favor, tente novamente.")
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå Formato inv√°lido. Use: /salario [valor]\n"
            "Exemplo: /salario 3000"
        )

async def resumo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manipula o comando /resumo"""
    try:
        gm = get_gastos_manager(update.effective_user.id)
        resumo, total, resumo_texto = gm.get_resumo()
        await update.message.reply_text(resumo_texto)
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erro ao gerar resumo: {str(e)}")

async def resumo_detalhado(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manipula o comando /resumodetalhado"""
    try:
        gm = get_gastos_manager(update.effective_user.id)
        
        # Verifica se foram passados argumentos de data
        data_inicio = None
        data_fim = None
        
        if context.args:
            if len(context.args) >= 2:
                data_inicio = context.args[0]
                data_fim = context.args[1]
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è Por favor, forne√ßa as datas no formato: /resumodetalhado DD/MM/YYYY DD/MM/YYYY"
                )
                return
        
        # Gera o resumo detalhado
        resumo_texto, grafico_bytes = gm.get_resumo_detalhado(data_inicio, data_fim)
        
        # Envia o texto do resumo
        await update.message.reply_text(resumo_texto)
        
        # Se houver gr√°fico, envia como foto
        if grafico_bytes:
            await update.message.reply_photo(photo=grafico_bytes)
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erro ao gerar resumo detalhado: {str(e)}")

async def categorias(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manipula o comando /categorias"""
    gm = get_gastos_manager(update.effective_user.id)
    categorias = gm.get_categorias()
    
    message = "üìë Categorias dispon√≠veis:\n"
    for i, categoria in enumerate(categorias, 1):
        message += f"{i}. {categoria}\n"
    
    await update.message.reply_text(message)

async def metas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manipula o comando /metas e suas varia√ß√µes"""
    user_id = update.effective_user.id
    gm = get_gastos_manager(user_id)
    
    # Se n√£o tiver argumentos, mostra as metas atuais
    if not context.args:
        metas = gm.get_metas()
        
        if not metas:
            await update.message.reply_text(
                "üéØ Voc√™ ainda n√£o tem metas definidas.\n\n"
                "Para criar uma nova meta, voc√™ pode:\n"
                "1. Usar o comando: /metas criar [nome] [valor] [data_limite]\n"
                "   Exemplo: /metas criar Viagem 5000 31/12/2024\n\n"
                "2. Ou digitar frases como:\n"
                "   ‚Ä¢ 'Quero criar uma meta de Viagem com 5000 reais'\n"
                "   ‚Ä¢ 'Nova meta chamada Carro com 30000 reais'\n"
                "   ‚Ä¢ 'Vou guardar 1000 reais para a meta Casa'"
            )
            return
        
        message = "üéØ Suas Metas Financeiras:\n\n"
        for meta in metas:
            id_meta, nome, valor_meta, valor_atual, data_limite, descricao, status = meta
            percentual = (valor_atual / valor_meta) * 100 if valor_meta > 0 else 0
            emoji = "‚úÖ" if status == "conclu√≠da" else "‚è≥" if status == "ativa" else "‚ùå"
            message += f"{emoji} {nome} (ID: {id_meta}):\n"
            message += f"üí∞ Meta: R${valor_meta:.2f}\n"
            message += f"üíµ Atual: R${valor_atual:.2f} ({percentual:.1f}%)\n"
            if data_limite:
                message += f"üìÖ Data limite: {data_limite}\n"
            if descricao:
                message += f"üìù {descricao}\n"
            message += "\n"
        
        message += "\nüìå Comandos dispon√≠veis:\n"
        message += "/meta [nome da meta] [valor] - Adicionar valor a uma meta\n"
        message += "/metas editar [id] [campo] [valor] - Editar uma meta\n"
        message += "/metas remover [id] - Remover uma meta\n"
        message += "Exemplos:\n"
        message += "‚Ä¢ /meta Viagem 1000\n"
        message += "‚Ä¢ /metas editar 1 nome Nova Viagem\n"
        message += "‚Ä¢ /metas editar 1 valor 6000\n"
        message += "‚Ä¢ /metas editar 1 data 31/12/2024\n"
        message += "‚Ä¢ /metas remover 1\n"
        
        await update.message.reply_text(message)
        return
    
    # Comandos de gerenciamento de metas
    comando = context.args[0].lower()
    
    if comando in ["criar", "nova", "adicionar", "estabelecer", "definir"]:
        if len(context.args) < 3:
            await update.message.reply_text(
                "‚ö†Ô∏è Formato incorreto. Use: /metas criar [nome] [valor] [data_limite]\n"
                "Exemplo: /metas criar Viagem 5000 31/12/2024\n\n"
                "üí° Voc√™ tamb√©m pode digitar frases como:\n"
                "‚Ä¢ 'Quero criar uma meta de Viagem com 5000 reais'\n"
                "‚Ä¢ 'Nova meta chamada Carro com 30000 reais'\n"
                "‚Ä¢ 'Vou guardar 1000 reais para a meta Casa'"
            )
            return
        
        nome = context.args[1]
        try:
            valor = float(context.args[2].replace(',', '.'))
            data_limite = context.args[3] if len(context.args) > 3 else None
            
            if gm.definir_meta(nome, valor, data_limite):
                await update.message.reply_text(
                    f"‚úÖ Meta '{nome}' criada com sucesso!\n\n"
                    f"üí∞ Valor: R${valor:.2f}\n"
                    f"üìÖ Data limite: {data_limite if data_limite else 'N√£o definida'}\n\n"
                    "üí° Para adicionar valores a esta meta, use o comando:\n"
                    "/meta [nome da meta] [valor a adicionar]\n"
                    "Exemplo: /meta Viagem 1000"
                )
            else:
                await update.message.reply_text("‚ùå Erro ao criar meta. Tente novamente.")
        except ValueError:
            await update.message.reply_text("‚ùå Valor inv√°lido. Use apenas n√∫meros.")
    
    elif comando in ["atualizar", "atualiza", "atualize", "mudar", "alterar", "modificar"]:
        if len(context.args) < 3:
            await update.message.reply_text(
                "‚ö†Ô∏è Formato incorreto. Use: /metas atualizar [id] [valor_atual]\n"
                "Exemplo: /metas atualizar 1 1000\n\n"
                "üí° Dica: Voc√™ tamb√©m pode usar o comando /meta [nome da meta] [valor a adicionar]"
            )
            return
        
        try:
            meta_id = int(context.args[1])
            valor_atual = float(context.args[2].replace(',', '.'))
            
            if gm.atualizar_meta(meta_id, valor_atual):
                await update.message.reply_text(
                    f"‚úÖ Meta atualizada com sucesso!\n"
                    f"üí∞ Novo valor: R${valor_atual:.2f}\n\n"
                    "üí° Dica: Use o comando /meta [nome da meta] [valor a adicionar] para adicionar valores"
                )
            else:
                await update.message.reply_text("‚ùå Erro ao atualizar meta. Verifique o ID.")
        except ValueError:
            await update.message.reply_text("‚ùå Valores inv√°lidos. Use n√∫meros.")
    
    elif comando in ["ver", "mostrar", "listar", "exibir", "consultar"]:
        metas = gm.get_metas()
        if not metas:
            await update.message.reply_text("üéØ Voc√™ ainda n√£o tem metas definidas.")
            return
        
        message = "üéØ Suas Metas Financeiras:\n\n"
        for meta in metas:
            id_meta, nome, valor_meta, valor_atual, data_limite, descricao, status = meta
            percentual = (valor_atual / valor_meta) * 100 if valor_meta > 0 else 0
            emoji = "‚úÖ" if status == "conclu√≠da" else "‚è≥" if status == "ativa" else "‚ùå"
            message += f"{emoji} {nome}:\n"
            message += f"üí∞ Meta: R${valor_meta:.2f}\n"
            message += f"üíµ Atual: R${valor_atual:.2f} ({percentual:.1f}%)\n"
            if data_limite:
                message += f"üìÖ Data limite: {data_limite}\n"
            if descricao:
                message += f"üìù {descricao}\n"
            message += "\n"
        
        await update.message.reply_text(message)
    
    elif comando in ["remover", "deletar", "excluir", "apagar"]:
        if len(context.args) < 2:
            await update.message.reply_text(
                "‚ö†Ô∏è Formato incorreto. Use: /metas remover [id]\n"
                "Exemplo: /metas remover 1\n\n"
                "üí° Dica: Use /metas para ver a lista de metas e seus IDs"
            )
            return
        
        try:
            meta_id = int(context.args[1])
            if gm.remover_meta(meta_id):
                await update.message.reply_text(
                    f"‚úÖ Meta removida com sucesso!\n\n"
                    "üí° Use /metas para ver a lista atualizada de metas"
                )
            else:
                await update.message.reply_text(
                    "‚ùå Erro ao remover meta. Verifique se o ID est√° correto.\n"
                    "Use /metas para ver a lista de metas e seus IDs"
                )
        except ValueError:
            await update.message.reply_text("‚ùå ID inv√°lido. Use apenas n√∫meros.")
    
    elif comando in ["editar", "alterar", "modificar", "mudar"]:
        if len(context.args) < 4:
            await update.message.reply_text(
                "‚ö†Ô∏è Formato incorreto. Use: /metas editar [id] [campo] [valor]\n\n"
                "üìù Campos dispon√≠veis:\n"
                "‚Ä¢ nome - Nome da meta\n"
                "‚Ä¢ valor - Valor da meta\n"
                "‚Ä¢ data - Data limite (formato: DD/MM/AAAA)\n"
                "‚Ä¢ descricao - Descri√ß√£o da meta\n\n"
                "Exemplos:\n"
                "‚Ä¢ /metas editar 1 nome Nova Viagem\n"
                "‚Ä¢ /metas editar 1 valor 6000\n"
                "‚Ä¢ /metas editar 1 data 31/12/2024\n"
                "‚Ä¢ /metas editar 1 descricao Viagem para o Caribe"
            )
            return
        
        try:
            meta_id = int(context.args[1])
            campo = context.args[2].lower()
            valor = " ".join(context.args[3:])
            
            # Converte o valor conforme o campo
            if campo == "valor":
                valor = float(valor.replace(',', '.'))
            elif campo == "data":
                # Valida o formato da data
                try:
                    datetime.strptime(valor, '%d/%m/%Y')
                except ValueError:
                    await update.message.reply_text(
                        "‚ùå Data inv√°lida. Use o formato DD/MM/AAAA\n"
                        "Exemplo: 31/12/2024"
                    )
                    return
            
            # Mapeia o campo para o par√¢metro correto
            campos = {
                "nome": "nome",
                "valor": "valor_meta",
                "data": "data_limite",
                "descricao": "descricao"
            }
            
            if campo not in campos:
                await update.message.reply_text(
                    "‚ùå Campo inv√°lido. Campos dispon√≠veis:\n"
                    "‚Ä¢ nome - Nome da meta\n"
                    "‚Ä¢ valor - Valor da meta\n"
                    "‚Ä¢ data - Data limite\n"
                    "‚Ä¢ descricao - Descri√ß√£o da meta"
                )
                return
            
            # Prepara os par√¢metros para a fun√ß√£o editar_meta
            parametros = {campos[campo]: valor}
            
            if gm.editar_meta(meta_id, **parametros):
                await update.message.reply_text(
                    f"‚úÖ Meta editada com sucesso!\n\n"
                    "üí° Use /metas para ver a lista atualizada de metas"
                )
            else:
                await update.message.reply_text(
                    "‚ùå Erro ao editar meta. Verifique se o ID e os valores est√£o corretos.\n"
                    "Use /metas para ver a lista de metas e seus IDs"
                )
                
        except ValueError as e:
            if "could not convert string to float" in str(e):
                await update.message.reply_text("‚ùå Valor inv√°lido. Use apenas n√∫meros para o campo 'valor'.")
            else:
                await update.message.reply_text("‚ùå ID inv√°lido. Use apenas n√∫meros para o ID da meta.")
    
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è Comando inv√°lido. Use:\n"
            "/metas - Ver todas as metas\n"
            "/metas criar [nome] [valor] [data_limite] - Criar nova meta\n"
            "/meta [nome da meta] [valor a adicionar] - Adicionar valor a uma meta\n\n"
            "üí° Dica: Voc√™ tamb√©m pode gerenciar metas digitando frases como:\n"
            "‚Ä¢ 'Quero criar uma meta de Viagem com 5000 reais'\n"
            "‚Ä¢ 'Mostre minhas metas'"
        )

async def meta(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manipula o comando /meta para atualizar o valor de uma meta"""
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ö†Ô∏è Formato incorreto. Use: /meta [nome da meta] [valor a adicionar]\n"
            "Exemplo: /meta Viagem 1000"
        )
        return
    
    try:
        nome_meta = " ".join(context.args[:-1])  # Pega todos os argumentos exceto o √∫ltimo como nome da meta
        valor = float(context.args[-1].replace(',', '.'))
        
        if valor <= 0:
            await update.message.reply_text("‚ùå O valor deve ser maior que zero.")
            return
        
        gm = get_gastos_manager(update.effective_user.id)
        metas = gm.get_metas()
        
        # Procura a meta pelo nome
        meta_encontrada = None
        for meta in metas:
            if meta[1].lower() == nome_meta.lower():
                meta_encontrada = meta
                break
        
        if not meta_encontrada:
            await update.message.reply_text(f"‚ùå Meta '{nome_meta}' n√£o encontrada.")
            return
        
        # Atualiza a meta
        if gm.registrar_contribuicao_meta(meta_encontrada[0], valor)[0]:
            await update.message.reply_text(
                f"‚úÖ Valor adicionado √† meta '{nome_meta}' com sucesso!\n"
                f"üí∞ Valor adicionado: R${valor:.2f}"
            )
        else:
            await update.message.reply_text("‚ùå Erro ao atualizar meta. Tente novamente.")
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå Valor inv√°lido. Use: /meta [nome da meta] [valor a adicionar]\n"
            "Exemplo: /meta Viagem 1000"
        )

async def limpar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manipula o comando /limpar"""
    gm = get_gastos_manager(update.effective_user.id)
    
    # Criar bot√µes de confirma√ß√£o
    keyboard = [
        [
            InlineKeyboardButton("Sim", callback_data="limpar_sim"),
            InlineKeyboardButton("N√£o", callback_data="limpar_nao")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚ö†Ô∏è Tem certeza que deseja limpar todo o hist√≥rico de gastos?",
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manipula os callbacks dos bot√µes inline"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    gm = get_gastos_manager(user_id)
    
    if query.data == "registrar_gasto":
        await query.edit_message_text(
            "*üí∞ Registro de Gastos*\n\n"
            "Digite seu gasto no formato:\n"
            "‚Ä¢ \"gastei 50 reais com almo√ßo\"\n"
            "‚Ä¢ \"paguei 100 no mercado\"\n"
            "‚Ä¢ \"comprei um presente por 80\"\n\n"
            "üí° Voc√™ pode especificar a data:\n"
            "‚Ä¢ \"gastei 50 com almo√ßo ontem\"\n"
            "‚Ä¢ \"paguei 100 no mercado semana passada\"",
            parse_mode='Markdown'
        )
        
    elif query.data == "registrar_receita":
        await query.edit_message_text(
            "*üíµ Registro de Receitas*\n\n"
            "Digite sua receita no formato:\n"
            "‚Ä¢ \"ganhei 100 reais com freela\"\n"
            "‚Ä¢ \"recebi 50 de presente\"\n"
            "‚Ä¢ \"consegui 200 com vendas\"\n\n"
            "üí° Voc√™ pode especificar a data:\n"
            "‚Ä¢ \"ganhei 100 com freela ontem\"\n"
            "‚Ä¢ \"recebi 50 de presente semana passada\"",
            parse_mode='Markdown'
        )
        
    elif query.data == "ver_resumo":
        resumo, total, resumo_texto = gm.get_resumo()
        await query.edit_message_text(
            f"*üìä Resumo Financeiro*\n\n"
            f"{resumo_texto}\n\n"
            "üí° Use /resumodetalhado para ver uma an√°lise mais completa",
            parse_mode='Markdown'
        )
        
    elif query.data == "ver_metas":
        metas = gm.get_metas()
        if not metas:
            await query.edit_message_text(
                "*üéØ Metas Financeiras*\n\n"
                "Voc√™ ainda n√£o tem metas definidas.\n\n"
                "Para criar uma nova meta, use o comando /metas ou clique em Ajuda para mais informa√ß√µes.",
                parse_mode='Markdown'
            )
        else:
            message = "*üéØ Suas Metas Financeiras*\n\n"
            for meta in metas:
                id_meta, nome, valor_meta, valor_atual, data_limite, descricao, status = meta
                percentual = (valor_atual / valor_meta) * 100 if valor_meta > 0 else 0
                emoji = "‚úÖ" if status == "conclu√≠da" else "‚è≥" if status == "ativa" else "‚ùå"
                message += f"{emoji} *{nome}*\n"
                message += f"üí∞ Meta: R${valor_meta:.2f}\n"
                message += f"üíµ Atual: R${valor_atual:.2f} ({percentual:.1f}%)\n"
                if data_limite:
                    message += f"üìÖ Data limite: {data_limite}\n"
                if descricao:
                    message += f"üìù {descricao}\n"
                message += "\n"
            await query.edit_message_text(message, parse_mode='Markdown')
            
    elif query.data == "ajuda":
        # Cria bot√µes inline para se√ß√µes de ajuda
        keyboard = [
            [
                InlineKeyboardButton("üí∞ Gastos", callback_data="ajuda_gastos"),
                InlineKeyboardButton("üíµ Receitas", callback_data="ajuda_receitas")
            ],
            [
                InlineKeyboardButton("üéØ Metas", callback_data="ajuda_metas"),
                InlineKeyboardButton("üìä Resumos", callback_data="ajuda_resumos")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è Configura√ß√µes", callback_data="ajuda_config"),
                InlineKeyboardButton("‚ùì Outros", callback_data="ajuda_outros")
            ],
            [
                InlineKeyboardButton("üéâ Acesso Ilimitado", callback_data="acesso_ilimitado")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        help_message = """
        *üìã Comandos Dispon√≠veis*

        *üí∞ Gastos*
        ‚Ä¢ "gastei 50 com almo√ßo"
        ‚Ä¢ "paguei 100 no mercado"
        ‚Ä¢ "comprei um presente por 80"

        *üíµ Receitas*
        ‚Ä¢ "ganhei 100 com freela"
        ‚Ä¢ "recebi 50 de presente"
        ‚Ä¢ "consegui 200 com vendas"

        *üìä Comandos*
        /salario - Sal√°rio
        /resumo - Resumo b√°sico
        /resumodetalhado - An√°lise completa
        /categorias - Lista de categorias
        /metas - Gerenciar metas
        /limpar - Limpar hist√≥rico

        *üéØ Metas*
        ‚Ä¢ Crie metas com nome e valor
        ‚Ä¢ Acompanhe seu progresso
        ‚Ä¢ Defina data limite

        *ü§ñ IA Financeira*
        ‚Ä¢ Pergunte sobre investimentos
        ‚Ä¢ Pe√ßa dicas de economia
        ‚Ä¢ Consulte sobre or√ßamento

        Clique nos bot√µes para mais detalhes!
        """
        await query.edit_message_text(help_message, parse_mode='Markdown', reply_markup=reply_markup)
        
    elif query.data == "configuracoes":
        await query.edit_message_text(
            "*‚öôÔ∏è Configura√ß√µes*\n\n"
            "üìù *Comandos dispon√≠veis:*\n"
            "/salario - Ver ou alterar seu sal√°rio\n"
            "/categorias - Listar categorias\n"
            "/limpar - Limpar hist√≥rico\n\n"
            "üí° Use /ajuda para ver todas as op√ß√µes dispon√≠veis",
            parse_mode='Markdown'
        )
        
    elif query.data == "ajuda_gastos":
        await query.edit_message_text(
            "*üí∞ Ajuda: Registro de Gastos*\n\n"
            "üìù *Formato:*\n"
            "‚Ä¢ \"gastei 50 reais com almo√ßo\"\n"
            "‚Ä¢ \"paguei 100 no mercado\"\n"
            "‚Ä¢ \"comprei um presente por 80\"\n\n"
            "üìÖ *Datas:*\n"
            "‚Ä¢ \"gastei 50 com almo√ßo ontem\"\n"
            "‚Ä¢ \"paguei 100 no mercado semana passada\"\n"
            "‚Ä¢ \"comprei um presente por 80 em 15/03\"\n\n"
            "üí° *Dicas:*\n"
            "‚Ä¢ O bot identifica automaticamente a categoria\n"
            "‚Ä¢ Use emojis para facilitar a leitura\n"
            "‚Ä¢ Mantenha suas descri√ß√µes claras",
            parse_mode='Markdown'
        )
        
    elif query.data == "ajuda_receitas":
        await query.edit_message_text(
            "*üíµ Ajuda: Registro de Receitas*\n\n"
            "üìù *Formato:*\n"
            "‚Ä¢ \"ganhei 100 reais com freela\"\n"
            "‚Ä¢ \"recebi 50 de presente\"\n"
            "‚Ä¢ \"consegui 200 com vendas\"\n\n"
            "üìÖ *Datas:*\n"
            "‚Ä¢ \"ganhei 100 com freela ontem\"\n"
            "‚Ä¢ \"recebi 50 de presente semana passada\"\n"
            "‚Ä¢ \"consegui 200 com vendas em 15/03\"\n\n"
            "üí° *Dicas:*\n"
            "‚Ä¢ Registre todas as suas receitas\n"
            "‚Ä¢ Inclua renda extra e b√¥nus\n"
            "‚Ä¢ Mantenha um hist√≥rico organizado",
            parse_mode='Markdown'
        )
        
    elif query.data == "ajuda_metas":
        await query.edit_message_text(
            "*üéØ Ajuda: Metas Financeiras*\n\n"
            "üìù *Como criar uma meta:*\n"
            "1. Use o comando /metas\n"
            "2. Digite o nome da meta\n"
            "3. Defina o valor alvo\n"
            "4. (Opcional) Defina uma data limite\n\n"
            "üí° *Dicas:*\n"
            "‚Ä¢ Defina metas realistas\n"
            "‚Ä¢ Acompanhe seu progresso\n"
            "‚Ä¢ Celebre suas conquistas\n\n"
            "üìä *Comandos:*\n"
            "/metas - Ver todas as metas\n"
            "/metas criar [nome] [valor] [data] - Criar nova meta\n"
            "/metas editar [id] [campo] [valor] - Editar uma meta\n"
            "/metas remover [id] - Remover uma meta\n"
            "/meta [nome] [valor] - Adicionar valor a uma meta\n\n"
            "üìù *Campos para edi√ß√£o:*\n"
            "‚Ä¢ nome - Nome da meta\n"
            "‚Ä¢ valor - Valor da meta\n"
            "‚Ä¢ data - Data limite (DD/MM/AAAA)\n"
            "‚Ä¢ descricao - Descri√ß√£o da meta\n\n"
            "üí° *Exemplos:*\n"
            "‚Ä¢ /metas criar Viagem 5000 31/12/2024\n"
            "‚Ä¢ /metas editar 1 nome Nova Viagem\n"
            "‚Ä¢ /metas editar 1 valor 6000\n"
            "‚Ä¢ /metas editar 1 data 31/12/2024\n"
            "‚Ä¢ /metas remover 1\n"
            "‚Ä¢ /meta Viagem 1000",
            parse_mode='Markdown'
        )
        
    elif query.data == "ajuda_resumos":
        await query.edit_message_text(
            "*üìä Ajuda: Resumos Financeiros*\n\n"
            "üìù *Comandos dispon√≠veis:*\n"
            "/resumo - Ver resumo b√°sico\n"
            "/resumodetalhado - Ver an√°lise completa\n\n"
            "üí° *O que voc√™ ver√°:*\n"
            "‚Ä¢ Total de gastos e receitas\n"
            "‚Ä¢ Distribui√ß√£o por categoria\n"
            "‚Ä¢ Percentuais e tend√™ncias\n"
            "‚Ä¢ Gr√°ficos e visualiza√ß√µes\n\n"
            "üìÖ *Dicas:*\n"
            "‚Ä¢ Revise seu resumo semanalmente\n"
            "‚Ä¢ Compare per√≠odos diferentes\n"
            "‚Ä¢ Identifique oportunidades de economia",
            parse_mode='Markdown'
        )
        
    elif query.data == "ajuda_config":
        await query.edit_message_text(
            "*‚öôÔ∏è Ajuda: Configura√ß√µes*\n\n"
            "üìù *Comandos dispon√≠veis:*\n"
            "/salario - Ver ou alterar seu sal√°rio\n"
            "/categorias - Listar categorias\n"
            "/limpar - Limpar hist√≥rico\n\n"
            "üí° *Dicas:*\n"
            "‚Ä¢ Mantenha seu sal√°rio atualizado\n"
            "‚Ä¢ Organize suas categorias\n"
            "‚Ä¢ Fa√ßa backup regularmente",
            parse_mode='Markdown'
        )
        
    elif query.data == "ajuda_outros":
        await query.edit_message_text(
            "*‚ùì Ajuda: Outros T√≥picos*\n\n"
            "ü§ñ *IA Financeira:*\n"
            "‚Ä¢ Pergunte sobre investimentos\n"
            "‚Ä¢ Pe√ßa dicas de economia\n"
            "‚Ä¢ Consulte sobre or√ßamento\n"
            "‚Ä¢ Tire d√∫vidas financeiras\n\n"
            "üí° *Dicas Gerais:*\n"
            "‚Ä¢ Use emojis para facilitar a leitura\n"
            "‚Ä¢ Mantenha suas descri√ß√µes claras\n"
            "‚Ä¢ Revise seus dados regularmente\n"
            "‚Ä¢ Defina metas realistas\n\n"
            "üì± *Suporte:*\n"
            "Use /ajuda para ver esta mensagem novamente",
            parse_mode='Markdown'
        )
        
    elif query.data == "acesso_ilimitado":
        # Cria bot√µes para o menu de acesso ilimitado
        keyboard = [
            [
                InlineKeyboardButton("üì± Enviar Comprovante", callback_data="enviar_comprovante"),
                InlineKeyboardButton("‚ùì D√∫vidas", callback_data="duvidas_pagamento")
            ],
            [
                InlineKeyboardButton("üîô Voltar", callback_data="ajuda")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "*üéâ Acesso Ilimitado ao FinBot*\n\n"
            "üí∞ *Valor:* R$19,99 (apenas uma vez)\n\n"
            "‚ú® *Benef√≠cios:*\n"
            "‚Ä¢ Acesso vital√≠cio ao bot\n"
            "‚Ä¢ Todas as atualiza√ß√µes futuras\n"
            "‚Ä¢ Suporte priorit√°rio\n"
            "‚Ä¢ Recursos exclusivos\n\n"
            "üîë *Chave PIX:*\n"
            "`123.456.789-00`\n\n"
            "üìù *Ap√≥s o pagamento:*\n"
            "1. Clique em 'Enviar Comprovante'\n"
            "2. Envie o comprovante de pagamento\n"
            "3. Aguarde a confirma√ß√£o\n\n"
            "üí° *D√∫vidas?* Clique no bot√£o abaixo",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
    elif query.data == "enviar_comprovante":
        aguardando_comprovante.add(user_id)
        ultimo_estado_usuario[user_id] = 'aguardando_comprovante'
        await query.edit_message_text(
            "*üì± Envio de Comprovante*\n\n"
            "Por favor, envie o comprovante de pagamento PIX.\n\n"
            "‚ö†Ô∏è *Importante:*\n"
            "‚Ä¢ Envie apenas imagens ou PDF\n"
            "‚Ä¢ Aguarde nossa confirma√ß√£o\n"
            "‚Ä¢ O processamento pode levar at√© 24h\n\n"
            "üîô Use /ajuda para voltar ao menu",
            parse_mode='Markdown'
        )
        return
        
    elif query.data == "duvidas_pagamento":
        await query.edit_message_text(
            "*‚ùì D√∫vidas sobre Pagamento*\n\n"
            "üìù *Perguntas Frequentes:*\n\n"
            "1. *O pagamento √© √∫nico?*\n"
            "Sim! Apenas R$19,99 e voc√™ ter√° acesso vital√≠cio.\n\n"
            "2. *Quais as formas de pagamento?*\n"
            "Aceitamos apenas PIX no momento.\n\n"
            "3. *Como recebo o acesso?*\n"
            "Ap√≥s confirmarmos seu pagamento, seu acesso ser√° liberado automaticamente.\n\n"
            "4. *E as atualiza√ß√µes futuras?*\n"
            "Todas as atualiza√ß√µes ser√£o gratuitas para voc√™.\n\n"
            "5. *Posso transferir meu acesso?*\n"
            "N√£o, o acesso √© pessoal e intransfer√≠vel.\n\n"
            "üîô Use /ajuda para voltar ao menu",
            parse_mode='Markdown'
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manipula mensagens de texto"""
    message = update.message.text
    user_id = update.effective_user.id
    nome = update.effective_user.first_name
    
    # Verifica se a mensagem cont√©m um documento (comprovante)
    if (user_id in aguardando_comprovante or ultimo_estado_usuario.get(user_id) == 'aguardando_comprovante') and update.message.document:
        if update.message.document.mime_type == 'application/pdf':
            comprovantes_dir = os.path.join('data', 'comprovantes')
            if not os.path.exists(comprovantes_dir):
                os.makedirs(comprovantes_dir)
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            nome_limpo = ''.join(c for c in nome if c.isalnum() or c in (' ', '_')).replace(' ', '_')
            filename = f'comprovante_{user_id}_{nome_limpo}_{timestamp}.pdf'
            file_path = os.path.join(comprovantes_dir, filename)
            try:
                file = await context.bot.get_file(update.message.document.file_id)
                await file.download_to_drive(file_path)
                log_file = os.path.join(comprovantes_dir, 'comprovantes_log.txt')
                with open(log_file, 'a', encoding='utf-8') as f:
                    log_entry = f"{timestamp} - Usu√°rio: {user_id} - Nome: {nome} - Arquivo: {filename}\n"
                    f.write(log_entry)
                    logger.info(f"Log atualizado: {log_entry}")
                aguardando_comprovante.discard(user_id)
                ultimo_estado_usuario[user_id] = None
                await update.message.reply_text(
                    "‚úÖ Comprovante recebido e salvo!\n\n"
                    "üìù *Status:* Em an√°lise\n"
                    "‚è≥ *Prazo:* At√© 24 horas\n\n"
                    "üîî Voc√™ receber√° uma mensagem quando seu acesso for liberado.\n"
                    "Obrigado pela prefer√™ncia! üòä",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Erro ao salvar comprovante: {str(e)}")
                await update.message.reply_text(
                    "‚ùå Desculpe, ocorreu um erro ao salvar seu comprovante.\n"
                    "Por favor, tente novamente ou entre em contato com o suporte.",
                    parse_mode='Markdown'
                )
            return
            
    # Obt√©m o gerenciador de gastos para o usu√°rio
    gm = get_gastos_manager(user_id)
    validador = ValidadorEntrada()
    
    # Verifica se est√° aguardando sal√°rio
    if user_id in aguardando_salario:
        try:
            # Usa o validador para normalizar o valor
            sucesso, valor, mensagem = validador.normalizar_valor(message)
            
            if not sucesso:
                await update.message.reply_text(f"‚ùå {mensagem}. Por favor, digite um valor v√°lido.")
                return
            
            # Define o sal√°rio
            if gm.definir_salario(float(valor)):
                aguardando_salario.remove(user_id)
                # Adiciona usu√°rio √† lista de espera por meta
                aguardando_meta[user_id] = {
                    'etapa': 'nome_meta',
                    'dados': {}
                }
                # Atualiza o resumo
                resumo_manager.atualizar_resumo(user_id, nome)
                await update.message.reply_text(
                    f"‚úÖ Sal√°rio registrado com sucesso: R${valor:.2f}\n\n"
                    f"Agora vamos definir suas metas financeiras!\n\n"
                    "üéØ Qual √© o nome da sua primeira meta? (exemplo: 'Viagem para a praia')"
                )
            else:
                await update.message.reply_text("‚ùå Erro ao registrar sal√°rio. Por favor, tente novamente.")
        except Exception as e:
            await update.message.reply_text("‚ùå Erro ao processar o sal√°rio. Por favor, tente novamente.")
        return
    
    # Verifica se est√° aguardando defini√ß√£o de meta
    if user_id in aguardando_meta:
        etapa = aguardando_meta[user_id]['etapa']
        dados = aguardando_meta[user_id]['dados']
        
        if etapa == 'nome_meta':
            dados['nome'] = message
            aguardando_meta[user_id]['etapa'] = 'valor_meta'
            await update.message.reply_text(
                f"√ìtimo! Agora, qual √© o valor que voc√™ quer juntar para '{message}'?\n"
                "Digite apenas o n√∫mero (exemplo: 5000)"
            )
            return
            
        elif etapa == 'valor_meta':
            try:
                valor = float(message.replace(',', '.'))
                if valor <= 0:
                    await update.message.reply_text("‚ùå O valor deve ser maior que zero. Por favor, digite um valor v√°lido.")
                    return
                    
                dados['valor'] = valor
                aguardando_meta[user_id]['etapa'] = 'data_limite'
                await update.message.reply_text(
                    "√ìtimo! Agora, qual √© a data limite para atingir esta meta?\n"
                    "Digite no formato DD/MM/AAAA (exemplo: 31/12/2024)\n"
                    "Ou digite 'sem data' se n√£o quiser definir uma data limite."
                )
                return
                
            except ValueError:
                await update.message.reply_text("‚ùå Por favor, digite apenas n√∫meros para o valor (exemplo: 5000)")
                return
                
        elif etapa == 'data_limite':
            if message.lower() == 'sem data':
                data_limite = None
            else:
                try:
                    # Verifica se a data est√° no formato correto
                    datetime.strptime(message, '%d/%m/%Y')
                    data_limite = message
                except ValueError:
                    await update.message.reply_text("‚ùå Data inv√°lida. Use o formato DD/MM/AAAA (exemplo: 31/12/2024)")
                    return
            
            # Cria a meta
            if gm.definir_meta(dados['nome'], dados['valor'], data_limite):
                del aguardando_meta[user_id]
                # Atualiza o resumo
                resumo_manager.atualizar_resumo(user_id, nome)
                await update.message.reply_text(
                    f"‚úÖ Meta '{dados['nome']}' criada com sucesso!\n\n"
                    f"üí∞ Valor: R${dados['valor']:.2f}\n"
                    f"üìÖ Data limite: {data_limite if data_limite else 'N√£o definida'}\n\n"
                    "üí° Para adicionar valores a esta meta, voc√™ pode:\n"
                    "‚Ä¢ Usar o comando /metas atualizar\n"
                    "‚Ä¢ Ou digitar 'Juntei X reais para a meta Y'\n\n"
                    "Utilize /ajuda para voltar ao menu."
                )
            else:
                await update.message.reply_text("‚ùå Erro ao criar meta. Tente novamente.")
            return
    
    # Verifica se est√° aguardando nome
    if user_id in aguardando_nome:
        # Define o nome do usu√°rio
        if gm.definir_nome_usuario(message):
            aguardando_nome.remove(user_id)
            # Adiciona usu√°rio √† lista de espera por sal√°rio
            aguardando_salario.add(user_id)
            # Atualiza o resumo
            resumo_manager.atualizar_resumo(user_id, message)
            await update.message.reply_text(
                f"‚úÖ Nome registrado com sucesso: {message}\n\n"
                f"Para podermos come√ßar a organizar suas finan√ßas, preciso saber seu sal√°rio mensal.\n\n"
                "üí∞ Por favor, digite seu sal√°rio (apenas n√∫meros, por exemplo: 3000)"
            )
        else:
            await update.message.reply_text("‚ùå Erro ao registrar nome. Por favor, tente novamente.")
        return
    
    # Primeiro tenta processar como contribui√ß√£o para meta
    sucesso, resposta = gm.processar_mensagem_meta(message)
    if sucesso:
        # Atualiza o resumo
        resumo_manager.atualizar_resumo(user_id, nome)
        await update.message.reply_text(resposta + "\n\nUtilize /ajuda para voltar ao menu.")
        return
    
    # Depois tenta processar como receita
    sucesso, resposta = gm.processar_mensagem_receita(message)
    if sucesso:
        # Atualiza o resumo
        resumo_manager.atualizar_resumo(user_id, nome)
        await update.message.reply_text(resposta + "\n\nUtilize /ajuda para voltar ao menu.")
        return
    
    # Depois tenta processar como gasto
    sucesso, resposta = gm.processar_mensagem_gasto(message)
    if sucesso:
        # Atualiza o resumo
        resumo_manager.atualizar_resumo(user_id, nome)
        await update.message.reply_text(resposta + "\n\nUtilize /ajuda para voltar ao menu.")
        return
    
    # Se n√£o for nenhum dos casos acima, envia para a IA
    resposta = await processar_comando_ia(message, user_id, nome)
    await update.message.reply_text(resposta + "\n\nUtilize /ajuda para voltar ao menu.")

def main():
    """Inicia o bot"""
    # Criar a aplica√ß√£o
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Adicionar handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("ajuda", ajuda))
    application.add_handler(CommandHandler("salario", salario))
    application.add_handler(CommandHandler("resumo", resumo))
    application.add_handler(CommandHandler("resumodetalhado", resumo_detalhado))
    application.add_handler(CommandHandler("categorias", categorias))
    application.add_handler(CommandHandler("metas", metas))
    application.add_handler(CommandHandler("meta", meta))
    application.add_handler(CommandHandler("limpar", limpar))
    
    # Adicionar handler para bot√µes inline
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # Adicionar handler para mensagens de texto
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Iniciar o bot com retentativas
    max_retries = 3
    retry_delay = 5  # segundos
    
    for attempt in range(max_retries):
        try:
            print(f"ü§ñ Tentando iniciar o bot (tentativa {attempt + 1}/{max_retries})...")
            application.run_polling()
            break
        except telegram.error.TimedOut:
            if attempt < max_retries - 1:
                print(f"‚ùå Timeout na conex√£o. Tentando novamente em {retry_delay} segundos...")
                time.sleep(retry_delay)
            else:
                print("‚ùå Falha ao conectar ap√≥s v√°rias tentativas. Verifique sua conex√£o com a internet.")
        except Exception as e:
            print(f"‚ùå Erro ao iniciar o bot: {str(e)}")
            if attempt < max_retries - 1:
                print(f"Tentando novamente em {retry_delay} segundos...")
                time.sleep(retry_delay)
            else:
                print("‚ùå Falha ao iniciar o bot ap√≥s v√°rias tentativas.")
            break

if __name__ == '__main__':
    main() 