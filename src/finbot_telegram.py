import logging
import google.generativeai as genai
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# Configura√ß√£o do logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configura√ß√£o do Gemini
GOOGLE_API_KEY = "AIzaSyAyQyCQPAkR5yjGkLgz-hOWqzpH-WALRVY"
genai.configure(api_key=GOOGLE_API_KEY)

# Configura√ß√£o do modelo
model = genai.GenerativeModel('gemini-1.5-pro')

# Prompt do FinBot
FINBOT_PROMPT = """
Voc√™ √© o FinBot, um assistente financeiro, inteligente e confi√°vel. Seu objetivo √© ajudar pessoas a organizarem suas finan√ßas pessoais de maneira pr√°tica, clara e personalizada.

Voc√™ entende sobre controle de gastos, investimentos, or√ßamentos, economia dom√©stica, metas financeiras e dicas de educa√ß√£o financeira.

Ao conversar, seja sempre educado, positivo e motivador. Fale de forma simples e objetiva, adaptando sua linguagem conforme o n√≠vel de conhecimento da pessoa (iniciante, intermedi√°rio ou avan√ßado).

Seu papel √©:

Registrar e organizar despesas e receitas.

Ajudar a planejar or√ßamentos e controlar d√≠vidas.

Sugerir melhorias e boas pr√°ticas financeiras.

Motivar o usu√°rio a atingir suas metas financeiras.

Responder d√∫vidas financeiras de maneira precisa e f√°cil de entender.

Sempre pergunte de forma respeitosa antes de agir, e encoraje o usu√°rio a manter uma rotina saud√°vel de acompanhamento financeiro.

Quando receber informa√ß√µes financeiras, registre com aten√ß√£o e, se necess√°rio, fa√ßa perguntas para entender melhor.

Voc√™ √© o parceiro financeiro que as pessoas podem confiar todos os dias.
"""

# Dicion√°rio para armazenar as conversas
user_chats = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para o comando /start"""
    user_id = update.effective_user.id
    
    # Inicia uma nova conversa para o usu√°rio
    user_chats[user_id] = model.start_chat(history=[])
    user_chats[user_id].send_message(FINBOT_PROMPT)
    
    welcome_message = (
        "üëã Ol√°! Eu sou o FinBot, seu assistente financeiro pessoal!\n\n"
        "Posso ajudar voc√™ com:\n\n"
        "üí∞ Controle de gastos e receitas\n"
        "üìä Planejamento or√ßament√°rio\n"
        "üéØ Defini√ß√£o de metas financeiras\n"
        "üí° Dicas de investimento\n"
        "üìù Gest√£o de d√≠vidas\n"
        "üìö Educa√ß√£o financeira\n\n"
        "Como posso ajudar voc√™ hoje?"
    )
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para o comando /help"""
    help_text = (
        "Comandos dispon√≠veis:\n\n"
        "/start - Iniciar conversa\n"
        "/help - Mostrar esta mensagem\n"
        "/gastos - Ajudar com controle de gastos\n"
        "/or√ßamento - Ajudar com planejamento or√ßament√°rio\n"
        "/metas - Ajudar a definir metas financeiras\n"
        "/investimentos - Dicas de investimento\n"
        "/dividas - Ajudar com gest√£o de d√≠vidas\n\n"
        "Voc√™ tamb√©m pode simplesmente conversar comigo sobre qualquer assunto financeiro!"
    )
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para mensagens de texto"""
    try:
        user_id = update.effective_user.id
        
        # Se o usu√°rio n√£o tem uma conversa ativa, inicia uma nova
        if user_id not in user_chats:
            user_chats[user_id] = model.start_chat(history=[])
            user_chats[user_id].send_message(FINBOT_PROMPT)
        
        # Envia a mensagem para o Gemini e obt√©m a resposta
        response = user_chats[user_id].send_message(update.message.text)
        
        # Envia a resposta para o usu√°rio
        await update.message.reply_text(response.text)
        
    except Exception as e:
        logger.error(f"Erro ao processar mensagem: {e}")
        await update.message.reply_text(
            "Desculpe, tive um problema ao processar sua mensagem. "
            "Por favor, tente novamente ou use um dos comandos dispon√≠veis."
        )

def main():
    """Fun√ß√£o principal que inicia o bot"""
    # Token do Telegram
    TELEGRAM_TOKEN = "7527630621:AAFVK10miTDtB1ivqZA5HCshQREKaBNs1es"
    
    # Cria a aplica√ß√£o
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Adiciona os handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Inicia o bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 